import { Cross2Icon } from '@radix-ui/react-icons';
import { useState } from 'react';

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Button } from '@/components/ui/button';
import { DialogClose } from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
} from '@/components/ui/select';
import { type BountyType } from '@/generated/prisma/enums';
import { type HackathonModel } from '@/prisma/models/Hackathon';
import { BountyIcon } from '@/svg/bounty-icon';
import { CypherpunkLogo } from '@/svg/cypherpunk-logo';
import { ProjectIcon } from '@/svg/project-icon';

import { getListingIcon } from '@/features/listings/utils/getListingIcon';
interface AutoGenerateTypeProps {
  input: string;
  setInput: (input: string) => void;
  setType: (type: BountyType | 'hackathon') => void;
  type: BountyType | 'hackathon';
  hackathons?: HackathonModel[];
  setHackathonSlug: (hackathon: string) => void;
  hackathonSlug: string;
}
export function AutoGenerateStageType({
  setType,
  setHackathonSlug,
}: AutoGenerateTypeProps) {
  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center justify-between">
        <h2 className="text-lg font-medium">Select the type of listing</h2>
        <DialogClose asChild>
          <Button variant="ghost" size="icon">
            <Cross2Icon className="h-4 w-4 text-slate-400" />
          </Button>
        </DialogClose>
      </div>
      <div className="grid grid-cols-2 gap-4">
        <Button
          className="flex h-55 flex-col gap-4 whitespace-normal text-slate-500 hover:text-slate-500"
          variant="outline"
          onClick={() => setType('bounty')}
        >
          <BountyIcon
            className="fill-slate-500"
            styles={{
              width: '3rem',
              height: '3rem',
            }}
          />
          <span className="flex max-w-11/12 flex-col gap-1">
            <h3 className="text-base font-medium text-slate-900">Bounty</h3>
            <p className="text-sm font-normal">
              Get multiple submissions for your task and reward the best work
            </p>
          </span>
        </Button>
        <Button
          className="flex h-55 flex-col gap-4 whitespace-normal text-slate-500 hover:text-slate-500"
          variant="outline"
          onClick={() => setType('project')}
        >
          <ProjectIcon
            className="fill-slate-500"
            styles={{
              width: '3rem',
              height: '3rem',
            }}
          />
          <span className="flex max-w-11/12 flex-col gap-1">
            <h3 className="text-base font-medium text-slate-900">Project</h3>
            <p className="text-sm font-normal">
              Receive proposals for your work and pick the right candidate
            </p>
          </span>
        </Button>
        <Button
          className="col-span-2 flex h-55 flex-col gap-4 whitespace-normal text-slate-500 hover:text-slate-500"
          variant="outline"
          onClick={() => {
            setType('hackathon');
            setHackathonSlug('cypherpunk');
          }}
        >
          <CypherpunkLogo
            styles={{
              width: '12rem',
            }}
          />
          <span className="flex max-w-6/12 flex-col gap-1">
            <h3 className="text-base font-medium text-slate-900">
              Cypherpunk Sidetrack
            </h3>
            <p className="text-sm font-normal">
              Get developers participating in Cypherpunk to build on top of your
              project
            </p>
          </span>
        </Button>
      </div>
    </div>
  );
}

export function AutoGenerateDropdownType({
  type,
  setType,
  hackathons,
  setHackathonSlug,
  hackathonSlug,
  input,
  setInput,
}: AutoGenerateTypeProps) {
  const [confirmDialogOpen, setConfirmDialogOpen] = useState(false);
  const [pendingTypeChange, setPendingTypeChange] = useState<string | null>(
    null,
  );

  const currentHackathon = hackathons?.find((h) => h.slug === hackathonSlug);

  const handleValueChange = (value: string) => {
    console.log('value', value);
    if (value === getDisplayValue()) return;
    if (value === currentHackathon?.slug) return;
    if (value === 'hackathon') return;
    if (value === '') return;

    // Only show dialog if there's input text
    if (input.trim()) {
      setPendingTypeChange(value);
      setConfirmDialogOpen(true);
    } else {
      // If no input, change type immediately
      if (value === 'bounty' || value === 'project') {
        setType(value);
        setHackathonSlug('');
      } else {
        setType('hackathon');
        setHackathonSlug(value);
      }
    }
  };

  const handleConfirmTypeChange = () => {
    if (pendingTypeChange) {
      if (pendingTypeChange === 'bounty' || pendingTypeChange === 'project') {
        setType(pendingTypeChange);
        setHackathonSlug('');
      } else {
        setType('hackathon');
        setHackathonSlug(pendingTypeChange);
      }
      setPendingTypeChange(null);
      setInput('');
    }
    setConfirmDialogOpen(false);
  };

  const getDisplayValue = () => {
    if (type === 'hackathon' && currentHackathon) {
      return currentHackathon.slug;
    }
    return type;
  };

  const getDisplayLabel = () => {
    if (type === 'hackathon' && currentHackathon) {
      return currentHackathon.name;
    }
    return type === 'bounty' ? 'Bounty' : 'Project';
  };

  return (
    <>
      <Select value={getDisplayValue()} onValueChange={handleValueChange}>
        <SelectTrigger className="h-8 w-auto font-medium text-slate-500">
          <div className="flex items-center gap-2 pr-2">
            {getListingIcon(type)}
            <span className="max-w-25 truncate">{getDisplayLabel()}</span>
          </div>
        </SelectTrigger>
        <SelectContent align="end" className="font-medium text-slate-500">
          <SelectItem value="bounty">
            <div className="flex items-center gap-2">
              {getListingIcon('bounty')}
              <span>Bounty</span>
            </div>
          </SelectItem>
          <SelectItem value="project">
            <div className="flex items-center gap-2">
              {getListingIcon('project')}
              <span>Project</span>
            </div>
          </SelectItem>
          {hackathons?.map((hackathon) => (
            <SelectItem key={hackathon.id} value={hackathon.slug}>
              <div className="flex items-center gap-2">
                {getListingIcon('hackathon')}
                <span className="max-w-25 truncate">{hackathon.name}</span>
              </div>
            </SelectItem>
          ))}
        </SelectContent>
      </Select>

      <AlertDialog
        open={confirmDialogOpen}
        onOpenChange={() => setConfirmDialogOpen(false)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Continue?</AlertDialogTitle>
            <AlertDialogDescription>
              Changing the listing type means your prompt text will be cleared
              and you will have to write a new prompt. Do you want to continue?
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleConfirmTypeChange}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
