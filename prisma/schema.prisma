generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Jobs {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  description   String?  @db.Text
  skills        String?
  subskills     String?
  deadline      String?
  source        Source   @default(NATIVE)
  active        Boolean  @default(true)
  private       Boolean  @default(false)
  featured      Boolean  @default(false)
  experience    String?
  jobType       JobType  @default(fulltime)
  maxSalary     Float?
  minSalary     Float?
  maxEq         Float?
  minEq         Float?
  location      String?
  sponsorId     String
  timezone      String?
  link          String?
  sourceDetails Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sponsor       Sponsors @relation(fields: [sponsorId], references: [id])

  @@index([id])
  @@index([sponsorId])
}

model Bounties {
  id                   String             @id @default(uuid())
  title                String
  slug                 String             @unique
  description          String?            @db.Text
  deadline             DateTime?
  eligibility          Json?
  status               status             @default(OPEN)
  token                String?
  rewardAmount         Int?
  rewards              Json?
  sponsorId            String
  pocId                String
  source               Source             @default(NATIVE)
  sourceDetails        Json?
  isPublished          Boolean            @default(false)
  isFeatured           Boolean            @default(false)
  isActive             Boolean            @default(true)
  isArchived           Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  applicationLink      String?
  skills               Json?
  type                 BountyType         @default(bounty)
  requirements         String?            @db.Text
  totalPaymentsMade    Int?               @default(0)
  totalWinnersSelected Int?               @default(0)
  isWinnersAnnounced   Boolean            @default(false)
  templateId           String?
  region               Regions            @default(GLOBAL)
  pocSocials           String?
  hackathonprize       Boolean            @default(false)
  applicationType      ApplicationType    @default(fixed)
  timeToComplete       String?
  references           Json?
  winners              Json?
  referredBy           String?
  publishedAt          DateTime?
  isPrivate            Boolean            @default(false)
  template             BountiesTemplates? @relation(fields: [templateId], references: [id])
  sponsor              Sponsors           @relation(fields: [sponsorId], references: [id])
  poc                  User               @relation("poc", fields: [pocId], references: [id])
  Submission           Submission[]
  SubscribeBounty      SubscribeBounty[]
  hackathonId          String?
  Hackathon            Hackathon?         @relation(fields: [hackathonId], references: [id])
  usdValue             Int?
  compensationType     CompensationType   @default(fixed)
  minRewardAsk         Int?
  maxRewardAsk         Int?

  @@index([id, slug])
  @@index([sponsorId])
  @@index([pocId])
  @@index([templateId])
  @@index([hackathonId])
}

model BountiesTemplates {
  id                  String     @id @default(uuid())
  templateTitle       String
  templateDescription String?    @db.Text
  title               String?
  slug                String?
  description         String?    @db.Text
  requirements        String?    @db.Text
  deadline            DateTime?
  eligibility         Json?
  token               String?
  rewardAmount        Int?
  rewards             Json?
  color               String?
  emoji               String?
  isFeatured          Boolean    @default(false)
  isActive            Boolean    @default(true)
  isArchived          Boolean    @default(false)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  skills              Json?
  type                BountyType @default(bounty)
  Bounties            Bounties[]

  @@index([id])
}

model Comment {
  id          String      @id @default(uuid())
  message     String      @db.VarChar(1000)
  authorId    String
  listingType ListingType @default(BOUNTY)
  listingId   String
  isActive    Boolean     @default(true)
  isArchived  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  author      User        @relation(fields: [authorId], references: [id])

  @@index([id, listingId])
  @@index([authorId])
}

model Grants {
  id               String   @id @default(uuid())
  title            String
  slug             String   @unique
  description      String?  @db.Text
  shortDescription String?  @db.VarChar(1000)
  token            String?
  rewardAmount     Int?
  link             String?
  region           Regions  @default(GLOBAL)
  source           Source   @default(NATIVE)
  sponsorId        String
  pocId            String
  isPublished      Boolean  @default(false)
  isFeatured       Boolean  @default(false)
  isActive         Boolean  @default(true)
  isArchived       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  skills           Json?
  logo             String?
  sponsor          Sponsors @relation(fields: [sponsorId], references: [id])
  poc              User     @relation(fields: [pocId], references: [id])

  @@index([id, slug])
  @@index([pocId])
  @@index([sponsorId])
}

model Submission {
  id                 String           @id @default(uuid())
  link               String?          @db.VarChar(500)
  tweet              String?          @db.VarChar(500)
  eligibilityAnswers Json?
  userId             String
  listingId          String
  isWinner           Boolean          @default(false)
  winnerPosition     String?
  isActive           Boolean          @default(true)
  isArchived         Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  like               Json?
  likes              Int?
  isPaid             Boolean          @default(false)
  paymentDetails     Json?
  otherInfo          String?          @db.VarChar(2000)
  listing            Bounties         @relation(fields: [listingId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
  ask                Int?
  label              SubmissionLabels @default(Unreviewed)

  @@index([id, listingId])
  @@index([userId])
  @@index([listingId])
}

model Otp {
  id        String   @id @map("_id")
  email     String
  otp       Int
  timestamp DateTime @default(now())
}

model Sponsors {
  id                 String         @id @default(uuid())
  name               String         @unique
  slug               String         @unique
  logo               String?
  url                String?
  industry           String
  twitter            String?
  bio                String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  isArchived         Boolean        @default(false)
  isActive           Boolean        @default(true)
  totalRewardedInUSD Int            @default(0)
  Hackathon          Hackathon?
  UserSponsors       UserSponsors[]
  Bounties           Bounties[]
  Grants             Grants[]
  Jobs               Jobs[]
  User               User[]

  @@index([id, slug])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String            @id @default(uuid())
  publicKey         String?
  email             String            @unique
  username          String?           @unique
  photo             String?
  firstName         String?
  lastName          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isVerified        Boolean           @default(false)
  role              String            @default("USER")
  totalEarnedInUSD  Int               @default(0)
  isTalentFilled    Boolean           @default(false)
  interests         String?
  bio               String?
  twitter           String?
  discord           String?
  github            String?
  linkedin          String?
  website           String?
  telegram          String?
  community         String?
  experience        String?
  superteamLevel    String?
  location          String?
  cryptoExperience  String?
  workPrefernce     String?
  currentEmployer   String?
  pow               String?           @db.VarChar(2000)
  notifications     Json? //remove this later
  private           Boolean           @default(false)
  skills            Json?
  currentSponsorId  String?
  currentSponsor    Sponsors?         @relation(fields: [currentSponsorId], references: [id])
  UserSponsors      UserSponsors[]
  poc               Bounties[]        @relation("poc")
  Comment           Comment[]
  Submission        Submission[]
  Grants            Grants[]
  UserInvites       UserInvites[]
  SubscribeBounty   SubscribeBounty[]
  PoW               PoW[]
  accounts          Account[]
  sessions          Session[]
  emailVerified     DateTime?
  Hackathon         Hackathon?        @relation(fields: [hackathonId], references: [id])
  hackathonId       String?
  featureModalShown Boolean           @default(false)
  emailSettings     EmailSettings[]
  surveysShown      Json?

  @@index([email, publicKey, username])
  @@index([currentSponsorId])
  @@index([hackathonId])
}

model PoW {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String   @db.Text
  skills      Json?
  link        String
  createdAt   DateTime @default(now())
  subSkills   Json?
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model EmailSettings {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  category String

  @@index([userId])
}

model UserSponsors {
  userId    String
  sponsorId String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  sponsor   Sponsors @relation(fields: [sponsorId], references: [id])

  @@id([userId, sponsorId])
  @@index([userId, sponsorId])
  @@index([sponsorId])
}

model UserInvites {
  id         String   @id @default(uuid())
  email      String
  senderId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sponsorId  String
  memberType Role     @default(MEMBER)
  sender     User     @relation(fields: [senderId], references: [id])

  @@index([id])
  @@index([senderId])
}

model emailLogs {
  id        String    @id @default(uuid())
  email     String?
  type      EmailType
  bountyId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model SubscribeBounty {
  id         String    @id @default(uuid())
  userId     String
  bountyId   String
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User      @relation(fields: [userId], references: [id])
  Bounties   Bounties? @relation(fields: [bountyId], references: [id])

  @@index([bountyId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Hackathon {
  id           String     @id @default(uuid())
  slug         String     @unique
  name         String
  logo         String
  altLogo      String?
  description  String
  listings     Bounties[]
  sponsorId    String?    @unique
  startDate    DateTime?
  deadline     DateTime?
  announceDate DateTime?
  eligibility  Json?
  Sponsor      Sponsors?  @relation(fields: [sponsorId], references: [id])
  User         User[]

  @@index([sponsorId])
}

enum EmailType {
  BOUNTY_REVIEW
  BOUNTY_DEADLINE
  BOUNTY_DEADLINE_WEEK
  BOUNTY_CLOSE_DEADLINE
  NO_VERIFICATION
  NO_ACTIVITY
  NO_REVIEW_SPONSOR_1
  NO_REVIEW_SPONSOR_2
}

enum Role {
  ADMIN
  MEMBER
}

enum Source {
  NATIVE
  IMPORT
}

enum ApplicationType {
  rolling
  fixed
}

enum status {
  OPEN
  REVIEW
  CLOSED
}

enum BountyType {
  bounty
  project
  hackathon
}

enum ListingType {
  BOUNTY
  SUBMISSION
}

enum JobType {
  parttime
  fulltime
  internship
}

enum Regions {
  GLOBAL
  INDIA
  VIETNAM
  GERMANY
  TURKEY
  MEXICO
  UK
  UAE
  NIGERIA
  ISRAEL
  BRAZIL
  MALAYSIA
  BALKAN
  PHILIPPINES
}

enum CompensationType {
  fixed
  range
  variable
}

enum SubmissionLabels {
  Unreviewed
  Reviewed
  Shortlisted
  Spam
}
